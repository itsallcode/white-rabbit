plugins {
    id 'com.github.johnrengelman.shadow' version '6.0.0'
}

shadowJar {
    archiveBaseName.set('jfxui')
    archiveVersion.set(null)
}

def mainClass = 'org.itsallcode.whiterabbit.jfxui.App'

jar {
    manifest {
        attributes 'Main-Class': mainClass
    }
}

build.dependsOn shadowJar

task runJfxui(type: JavaExec, dependsOn: shadowJar) {
    classpath = shadowJar.outputs.files
    main = mainClass
    workingDir = rootProject.projectDir
}

ext {
    def os = org.gradle.internal.os.OperatingSystem.current()
    ext.platform = os.windows ? 'win' : (os.linux ? 'linux' : (os.mac ? 'mac' : 'unknown'))
    ext.javaFxVersion = '11.0.2'
}

sourceSets {
    uiTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    uiTestImplementation.extendsFrom testImplementation
    uiTestRuntimeOnly.extendsFrom testRuntimeOnly
}

dependencies {
    implementation project(':logic')
    implementation "org.openjfx:javafx-base:$javaFxVersion:$platform"
    implementation "org.openjfx:javafx-graphics:$javaFxVersion:$platform"
    implementation "org.openjfx:javafx-controls:$javaFxVersion:$platform"
    
    implementation "org.eclipse.jdt:org.eclipse.jdt.annotation:2.2.600"
    
    testImplementation "javax.json.bind:javax.json.bind-api:1.0"
    testRuntimeOnly "org.eclipse:yasson:1.0.8"
    
    testImplementation "org.testfx:testfx-junit5:4.0.16-alpha"
    testRuntimeOnly "org.testfx:openjfx-monocle:jdk-11+26"
}

task uiTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    useJUnitPlatform()

    if(!project.hasProperty("uiTestsHeadless") || project.property("uiTestsHeadless") != "false") {
        systemProperty 'java.awt.headless', 'true'
        systemProperty 'testfx.headless', 'true'
        systemProperty 'testfx.robot', 'glass'
        systemProperty 'glass.platform', 'Monocle'
        systemProperty 'monocle.platform', 'Headless'
    }

    testClassesDirs = sourceSets.uiTest.output.classesDirs
    classpath = sourceSets.uiTest.runtimeClasspath
    shouldRunAfter test
}

check.dependsOn uiTest

tasks["jacocoTestReport"].executionData fileTree(project.buildDir).include("jacoco/*.exec")
