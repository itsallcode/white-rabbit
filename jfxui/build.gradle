plugins {
    id 'com.github.johnrengelman.shadow'
}

ext {
    javaFxVersion = '15.0.1'
    monocleVersion = '12.0.1+2'
}

dependencies {
    implementation project(':logic')
    ['win', 'mac', 'linux'].forEach {platform ->
        implementation "org.openjfx:javafx-base:$javaFxVersion:$platform"
        implementation "org.openjfx:javafx-graphics:$javaFxVersion:$platform"
        implementation "org.openjfx:javafx-controls:$javaFxVersion:$platform"
    }

    implementation "org.apache.logging.log4j:log4j-api:$log4jVersion"
    implementation "org.eclipse.jdt:org.eclipse.jdt.annotation:2.2.600"
    implementation "javax.json.bind:javax.json.bind-api:${jsonBindApiVersion}"

    runtimeOnly "org.apache.logging.log4j:log4j-core:${log4jVersion}"
    runtimeOnly "org.fusesource.jansi:jansi:2.1.1"

    testImplementation "javax.json.bind:javax.json.bind-api:${jsonBindApiVersion}"
    testRuntimeOnly "org.eclipse:yasson:${yassonVersion}"

    testImplementation "org.testfx:testfx-junit5:4.0.16-alpha"
    testRuntimeOnly "org.testfx:openjfx-monocle:jdk-$monocleVersion"
}

shadowJar {
    archiveBaseName.set('white-rabbit-fx')
    archiveClassifier.set(null)
    archiveVersion.set(project.version.toString())
}

ext {
    mainClass = 'org.itsallcode.whiterabbit.jfxui.App'
}

jar {
    manifest {
        attributes 'Main-Class': project.mainClass
    }
}

build.dependsOn shadowJar

project(':plugins').afterEvaluate {
    List<Task> pluginJarTasks = project(':plugins').ext.pluginBuildTasks

    task runJfxui(type: JavaExec, dependsOn: [shadowJar] + pluginJarTasks) {
        def pluginJars = files(pluginJarTasks.collect {it.outputs.files })
        classpath = shadowJar.outputs.files + pluginJars
        main = project.mainClass
        workingDir = rootProject.projectDir
    }
}

task runJfxuiWithoutPlugins(type: JavaExec, dependsOn: shadowJar) {
    classpath = shadowJar.outputs.files
    main = project.mainClass
    workingDir = rootProject.projectDir
}

sourceSets {
    uiTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    uiTestImplementation.extendsFrom testImplementation
    uiTestRuntimeOnly.extendsFrom testRuntimeOnly
}

task uiTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    useJUnitPlatform()

    forkEvery 5
    jvmArgs '-XX:+HeapDumpOnOutOfMemoryError'

    if(!project.hasProperty("uiTestsHeadless") || project.property("uiTestsHeadless") != "false") {
        systemProperty 'java.awt.headless', 'true'
        systemProperty 'testfx.headless', 'true'
        systemProperty 'testfx.robot', 'glass'
        systemProperty 'glass.platform', 'Monocle'
        systemProperty 'monocle.platform', 'Headless'
    }

    systemProperty 'testfx.launch.timeout', '60000'
    systemProperty 'testfx.setup.timeout', '30000'

    testClassesDirs = sourceSets.uiTest.output.classesDirs
    classpath = sourceSets.uiTest.runtimeClasspath
    shouldRunAfter test
}

check.dependsOn uiTest

tasks["jacocoTestReport"].executionData fileTree(project.buildDir).include("jacoco/*.exec")
