dependencies {
    implementation project(':logic')
    def javaFxVersion = libs.versions.javafx.get()
    ['win', 'mac', 'linux'].forEach {platform ->
        implementation "org.openjfx:javafx-base:$javaFxVersion:$platform"
        implementation "org.openjfx:javafx-graphics:$javaFxVersion:$platform"
        implementation "org.openjfx:javafx-controls:$javaFxVersion:$platform"
    }

    implementation libs.log4j.api
    implementation libs.jdtAnnotations
    implementation libs.jsonBindApi

    runtimeOnly libs.log4j.core
    runtimeOnly libs.log4j.jul
    runtimeOnly libs.jansi

    testImplementation libs.testfx
    testImplementation libs.bundles.testUtils

    testRuntimeOnly libs.yasson
    testRuntimeOnly libs.monocle
}

sourceSets {
    uiTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    uiTestImplementation.extendsFrom testImplementation
    uiTestRuntimeOnly.extendsFrom testRuntimeOnly
}

task uiTest(type: Test, group: 'verification') {
    description = 'Runs integration tests.'

    useJUnitPlatform {
        if(project.hasProperty('skipFlakyTests') && project.property('skipFlakyTests') == 'true') {
            excludeTags 'FLAKY'
        }
    }

    forkEvery 5
    jvmArgs '-XX:+HeapDumpOnOutOfMemoryError', '-XX:+EnableDynamicAgentLoading'

    if(!project.hasProperty("uiTestsHeadless") || project.property("uiTestsHeadless") != "false") {
        systemProperty 'java.awt.headless', 'true'
        systemProperty 'testfx.headless', 'true'
        systemProperty 'testfx.robot', 'glass'
        systemProperty 'glass.platform', 'Monocle'
        systemProperty 'monocle.platform', 'Headless'
    }

    systemProperty 'testfx.launch.timeout', '60000'
    systemProperty 'testfx.setup.timeout', '30000'

    testClassesDirs = sourceSets.uiTest.output.classesDirs
    classpath = sourceSets.uiTest.runtimeClasspath
    shouldRunAfter test
}

check.dependsOn uiTest

tasks["jacocoTestReport"].executionData fileTree(project.buildDir).include("jacoco/*.exec")

ext {
    mainClass = 'org.itsallcode.whiterabbit.jfxui.App'
}

task run(type: JavaExec, group: 'run') {
    mainClass = project.mainClass
    workingDir = rootProject.projectDir
    classpath = sourceSets.main.runtimeClasspath
}
