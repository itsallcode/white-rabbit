plugins {
    id 'com.github.johnrengelman.shadow'
    id 'org.panteleyev.jpackageplugin'
}

dependencies {
    implementation project(':logic')
    ['win', 'mac', 'linux'].forEach {platform ->
        implementation "org.openjfx:javafx-base:$javaFxVersion:$platform"
        implementation "org.openjfx:javafx-graphics:$javaFxVersion:$platform"
        implementation "org.openjfx:javafx-controls:$javaFxVersion:$platform"
    }

    implementation "org.apache.logging.log4j:log4j-api:$log4jVersion"
    implementation "org.eclipse.jdt:org.eclipse.jdt.annotation:2.2.600"
    implementation "jakarta.json.bind:jakarta.json.bind-api:${jsonBindApiVersion}"

    runtimeOnly "org.apache.logging.log4j:log4j-core:${log4jVersion}"
    runtimeOnly "org.apache.logging.log4j:log4j-jul:${log4jVersion}"
    runtimeOnly "org.fusesource.jansi:jansi:2.4.0"

    testImplementation "jakarta.json.bind:jakarta.json.bind-api:${jsonBindApiVersion}"
    testRuntimeOnly "org.eclipse:yasson:${yassonVersion}"

    testImplementation "org.testfx:testfx-junit5:4.0.16-alpha"
    testRuntimeOnly "org.testfx:openjfx-monocle:jdk-$monocleVersion"
}

shadowJar {
    archiveBaseName.set('white-rabbit-fx')
    archiveClassifier.set(null)
    archiveVersion.set(project.version.toString())
}

ext {
    mainClass = 'org.itsallcode.whiterabbit.jfxui.App'
}

jar {
    manifest {
        attributes 'Main-Class': project.mainClass
    }
}

build.dependsOn shadowJar

project(':plugins').afterEvaluate {
    List<Task> pluginJarTasks = project(':plugins').ext.pluginBuildTasks
    
    def userHome = System.properties['user.home']
    if(project.hasProperty('user.home')) {
    	userHome = project.property('user.home')
    }
    
    task runWithPlugins(type: JavaExec, dependsOn: [shadowJar] + pluginJarTasks, group: 'run') {
        group = "run"
        def pluginJars = files(pluginJarTasks.collect {it.outputs.files })
        classpath = shadowJar.outputs.files + pluginJars
        mainClass = project.mainClass
        workingDir = rootProject.projectDir
        systemProperties = ['user.home': userHome]
    }

    task runJfxuiWithPlugins(dependsOn: runWithPlugins, group: 'run') {
        // deprecated
    }
}

task run(type: JavaExec, dependsOn: shadowJar, group: 'run') {
    classpath = shadowJar.outputs.files
    mainClass = project.mainClass
    workingDir = rootProject.projectDir
}

task runJfxui(dependsOn: run, group: 'run') {
    // deprecated
}

sourceSets {
    uiTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    uiTestImplementation.extendsFrom testImplementation
    uiTestRuntimeOnly.extendsFrom testRuntimeOnly
}

task uiTest(type: Test, group: 'verification') {
    description = 'Runs integration tests.'

    useJUnitPlatform {
        if(project.hasProperty('skipFlakyTests') && project.property('skipFlakyTests') == 'true') {
            excludeTags 'FLAKY'
        }
    }

    forkEvery 5
    jvmArgs '-XX:+HeapDumpOnOutOfMemoryError'

    if(!project.hasProperty("uiTestsHeadless") || project.property("uiTestsHeadless") != "false") {
        systemProperty 'java.awt.headless', 'true'
        systemProperty 'testfx.headless', 'true'
        systemProperty 'testfx.robot', 'glass'
        systemProperty 'glass.platform', 'Monocle'
        systemProperty 'monocle.platform', 'Headless'
    }

    systemProperty 'testfx.launch.timeout', '60000'
    systemProperty 'testfx.setup.timeout', '30000'

    testClassesDirs = sourceSets.uiTest.output.classesDirs
    classpath = sourceSets.uiTest.runtimeClasspath
    shouldRunAfter test
}

check.dependsOn uiTest

tasks["jacocoTestReport"].executionData fileTree(project.buildDir).include("jacoco/*.exec")


def jPackageDir = "$buildDir/jpackage-jars"

task copyJPackageDependencies(type: Copy, dependsOn: ["jar"]) {
    from(configurations.runtimeClasspath).into jPackageDir
    from(tasks.jar.outputs.files).into jPackageDir
}


tasks.jpackage {
    dependsOn("copyJPackageDependencies")

    input  = jPackageDir
    destination = "$buildDir/jpackage-dist"

    appName = "WhiteRabbit"
    vendor = '"It\'s all code"'
    copyright = '"Copyright (C) 2021 Christoph Pirkl <christoph at users.sourceforge.net>"'
    licenseFile = "${rootProject.rootDir}/LICENSE"
    appDescription = '"A time recording tool"'
    icon = "${projectDir}/src/main/resources/icon.png"

    mainJar = tasks.jar.archiveFileName.get()
    mainClass = project.mainClass

    verbose = false
    arguments = []
    javaOptions = ["-Dfile.encoding=UTF-8"]
    additionalParameters = ["--about-url", "https://github.com/itsallcode/white-rabbit/blob/develop/README.md"]
    windows {
        winConsole = true
    }

    mac {
        macPackageIdentifier = "org.itsallcode.white-rabbit"
        macPackageName = "WhiteRabbit"
        icon = "${projectDir}/src/main/resources/icon.icns"
    }
}
