plugins {
    id 'eclipse'
    id "org.sonarqube" version "3.3"
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.0"
    id "io.codearte.nexus-staging" version "0.30.0"
    id 'com.github.johnrengelman.shadow' version '7.0.0' apply false
    id "com.moowork.node" version "1.3.1" apply false
    id "com.github.ben-manes.versions" version "0.39.0"
}

ext {
    junitVersion = '5.8.0-M1'
    log4jVersion = '2.14.1'
    mockitoVersion = '3.11.2'
    yassonVersion = '1.0.8'
    jsonBindApiVersion = '1.0'
}

def getProjectVersion() {
    if(project.hasProperty("releaseVersion")) {
        return project.property("releaseVersion")
    }
    return "1.6.0-SNAPSHOT"
}

version = getProjectVersion()
group = "org.itsallcode.whiterabbit"

def nonJavaProjects = ['webstart-infrastructure', 'webstart']

subprojects {
    group = rootProject.group
    version = rootProject.version

    if(nonJavaProjects.contains(project.name)) {
        return
    }
    apply plugin: "java"
    apply plugin: "jacoco"

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(11)
        }
        modularity.inferModulePath = false
    }

    dependencies {
        testImplementation "org.assertj:assertj-core:3.20.2"
        testImplementation "org.mockito:mockito-core:$mockitoVersion"
        testImplementation "org.mockito:mockito-junit-jupiter:$mockitoVersion"
        testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
        testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
        testImplementation "org.junit-pioneer:junit-pioneer:1.4.2"
        testImplementation "nl.jqno.equalsverifier:equalsverifier:3.6.1"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
        testRuntimeOnly "org.apache.logging.log4j:log4j-core:$log4jVersion"
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    test {
        useJUnitPlatform()
    }

    jacocoTestReport {
        reports {
            xml.required = true
        }
    }

    rootProject.tasks["sonarqube"].dependsOn(tasks["jacocoTestReport"])
}

def getOptionalProperty(String name) {
    if(project.hasProperty(name)) {
        return project.property(name)
    }
    logger.info("Project property '${name}' not available. Please it to ~/.gradle/gradle.properties")
    return null
}

nexusStaging {
    packageGroup = "org.itsallcode"
    username = getOptionalProperty("ossrhUsername")
    password = getOptionalProperty("ossrhPassword")
}

sonarqube {
    properties {
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.organization", "itsallcode"
    }
}
