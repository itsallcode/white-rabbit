plugins {
    id 'eclipse'
    id "org.sonarqube" version "3.3"
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.1"
    id "io.codearte.nexus-staging" version "0.30.0"
    id 'com.github.johnrengelman.shadow' version '7.1.2' apply false
    id "com.moowork.node" version "1.3.1" apply false
    id "com.github.ben-manes.versions" version "0.41.0"
    id "org.panteleyev.jpackageplugin" version "1.3.1" apply false
    id "org.gradle.crypto.checksum" version "1.2.0" apply false
}

ext {
    junitVersion = '5.8.2'
    log4jVersion = '2.17.1'
    mockitoVersion = '4.2.0'
    yassonVersion = '2.0.3'
    jsonBindApiVersion = '2.0.0'
    javaFxVersion = '18-ea+9'
    monocleVersion = '12.0.1+2'
}

def getProjectVersion() {
    if(project.hasProperty("releaseVersion")) {
        return project.property("releaseVersion")
    }
    return "1.8.0"
}

version = getProjectVersion()
group = "org.itsallcode.whiterabbit"

def nonJavaProjects = ['webstart-infrastructure', 'webstart']

subprojects {
    group = rootProject.group
    version = rootProject.version

    if(nonJavaProjects.contains(project.name)) {
        return
    }
    apply plugin: "java"
    apply plugin: "jacoco"

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
        modularity.inferModulePath = false
    }

    tasks.withType(JavaExec) {
        javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
    }

    dependencies {
        testImplementation "org.assertj:assertj-core:3.22.0"
        testImplementation "org.mockito:mockito-core:$mockitoVersion"
        testImplementation "org.mockito:mockito-junit-jupiter:$mockitoVersion"
        testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
        testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
        testImplementation "org.junit-pioneer:junit-pioneer:1.5.0"
        testImplementation "nl.jqno.equalsverifier:equalsverifier:3.8.2"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
        testRuntimeOnly "org.apache.logging.log4j:log4j-core:$log4jVersion"
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    test {
        useJUnitPlatform()
    }

    javadoc {
        enabled = false
    }

    jacocoTestReport {
        reports {
            xml.required = true
        }
    }

    rootProject.tasks["sonarqube"].dependsOn(tasks["jacocoTestReport"])
}

def getOptionalProperty(String name) {
    if(project.hasProperty(name)) {
        return project.property(name)
    }
    logger.info("Project property '${name}' not available. Please it to ~/.gradle/gradle.properties")
    return null
}

nexusStaging {
    packageGroup = "org.itsallcode"
    username = getOptionalProperty("ossrhUsername")
    password = getOptionalProperty("ossrhPassword")
}

sonarqube {
    properties {
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.organization", "itsallcode"
    }
}

def isNonStable = { String version ->
  def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
  def regex = /^[0-9,.v-]+(-r)?$/
  return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
  gradleReleaseChannel = "current"
  rejectVersionIf {
    isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
  }
}
