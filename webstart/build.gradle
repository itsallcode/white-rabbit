apply plugin: 'base'

def shadowJarTask = project(':jfxui').tasks['shadowJar']
def props = loadProperties()

task signJar(dependsOn: shadowJarTask, description: 'Sign shadowJar', group: 'Build') {
    def inputJar = shadowJarTask.outputs.files.singleFile
    def signedJar = file("$buildDir/libs/whiterabbitfx-signed.jar")
    inputs.file(inputJar)
    outputs.file(signedJar)
    doLast {
        Properties properties = loadProperties()
        ant.signjar (
            jar: inputJar,
            signedjar: signedJar,
            alias: properties.get('keystoreAlias'),
            storetype: "jks",
            keystore: properties.get('keystoreFile'),
            storepass: properties.get('keystorePassword'),
            verbose: false,
            preservelastmodified: "true"
        )
    }
}

task prepareStaticContent(dependsOn: signJar, type: Copy) {
    from "$projectDir/content"
    include "*"
    from signJar.outputs.files.singleFile
    into "$buildDir/content"
}

task invalidateCloudFrontCache(type: Exec) {
    executable("aws")
    args('cloudfront', 'create-invalidation', '--distribution-id', props.get('cloudfrontDistribution', 'Please define "cloudfrontDistribution" in webstart.properties'), '--paths', '/*')
}

task publishWebstart(dependsOn: prepareStaticContent, type: Exec) {
    finalizedBy(invalidateCloudFrontCache)
    executable("aws")
    args("s3", "sync", "$buildDir/content", "s3://${props.get('s3Bucket')}/")
}

def Properties loadProperties() {
    File file = new File("$projectDir/webstart.properties")
    Properties properties = new Properties()
    if(file.exists()) {
        file.withInputStream {stream ->
            properties.load(stream)
        }
    } else {
        logger.lifecycle("Warning: file ${file} does not exist. See webstart/README.md for details")
    }
    return properties
}
