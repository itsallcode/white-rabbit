plugins {
    id 'base'
}

def jfxuiProject = project(':jfxui')
def shadowJarTask = jfxuiProject.tasks['shadowJar']
def props = loadProperties()

task updateJarManifest(type: Jar, dependsOn: shadowJarTask, description: 'Update manifest', group: 'Build') {
    def domain = props.get('domain')
    def mainClass = jfxuiProject.mainClass
    doFirst {
        assert domain != null : "Please define 'domain' in ${projectDir}/webstart.properties. See ${projectDir}/README.md for details"
        logger.info "Using domain '${domain}' in jar manifest"
    }
    from(zipTree(shadowJarTask.outputs.files.singleFile)) {
        exclude('META-INF/MANIFEST.MF')
    }
    manifest {
        attributes(
            'Main-Class': mainClass,
            'Application-Name': 'WhiteRabbit Time Recording',
            'Permissions': 'all-permissions',
            'Entry-Point': mainClass,
            'Codebase': "https://${domain}/",
            'Trusted-Only': true,
            'Trusted-Library': true
        )
    }
}

def signJar(File inputJar, File outputJar, Properties props) {
    assert props.get('keystoreFile') != null : "Please create and fill ${projectDir}/webstart.properties. See ${projectDir}/README.md for details"
    logger.info("Signing jar $inputJar, writing to $outputJar")
    ant.signjar (
            jar: inputJar,
            signedjar: outputJar,
            alias: props.get('keystoreAlias'),
            storetype: "jks",
            keystore: props.get('keystoreFile'),
            storepass: props.get('keystorePassword'),
            verbose: false,
            preservelastmodified: "true"
    )
}

task signMainJar(dependsOn: updateJarManifest, description: 'Sign shadowJar', group: 'Build') {
    def inputJar = updateJarManifest.outputs.files.singleFile
    def signedJar = file("$buildDir/libs/whiterabbitfx-signed.jar")
    inputs.file(inputJar)
    outputs.file(signedJar)
    doLast {
        signJar(inputJar, signedJar, props)
    }
}

List<Task> pluginBuildTasks = project(':plugins').ext.pluginBuildTasks

task signPluginJars(dependsOn: pluginBuildTasks, description: 'Sign plugin jars', group: 'Build') {
    def inputJars = pluginBuildTasks.collect {it.outputs.files.singleFile }
    def getOutputJar = { File input -> new File("$buildDir/libs/${input.name.replace('.jar', '-signed.jar')}") }
    inputs.files(inputJars)
    outputs.files(inputJars.collect(getOutputJar))
    doLast {
        inputJars.forEach {
            signJar(it, getOutputJar(it), props)
        }
    }
}

task installSignedPlugins(type: Copy, dependsOn: signPluginJars) {
    from(signPluginJars.outputs)
    into("${System.properties['user.home']}/.whiterabbit/plugins")
}

task prepareStaticContentPlugins(dependsOn: signPluginJars, type: Copy) {
    def versionSuffix = project.version.toString().endsWith('-SNAPSHOT') ? '-dev' : ''
    from(signPluginJars.outputs.files)
    into "$buildDir/content/plugins"
    rename { String fileName -> fileName.replace('.jar', "${versionSuffix}.jar") }
}

task prepareStaticContentMainJar(dependsOn: signMainJar, type: Copy) {
    def versionSuffix = project.version.toString().endsWith('-SNAPSHOT') ? '-dev' : ''
    from(signMainJar.outputs.files.singleFile)
    into "$buildDir/content"
    rename { String fileName -> fileName.replace('.jar', "${versionSuffix}.jar") }
}

task prepareStaticContentWebContent(type: Copy) {
    from("$projectDir/content") {
        include "*"
    }
    into "$buildDir/content"
}

task prepareStaticContent(dependsOn: [prepareStaticContentMainJar, prepareStaticContentPlugins, prepareStaticContentWebContent]) {
}

task invalidateCloudFrontCache(type: Exec) {
    executable("aws")
    args('cloudfront', 'create-invalidation', '--distribution-id', props.get('cloudfrontDistribution', 'Please define "cloudfrontDistribution" in webstart.properties'), '--paths', '/*')
}

task publishWebstart(dependsOn: prepareStaticContent, type: Exec) {
    finalizedBy(invalidateCloudFrontCache)
    executable("aws")
    args("s3", "sync", "$buildDir/content", "s3://${props.get('s3Bucket')}/")
}

def Properties loadProperties() {
    File file = new File("$projectDir/webstart.properties")
    Properties properties = new Properties()
    if(file.exists()) {
        file.withInputStream {stream ->
            properties.load(stream)
        }
    } else {
        logger.lifecycle("Warning: file ${file} does not exist. See webstart/README.md for details.")
    }
    return properties
}
